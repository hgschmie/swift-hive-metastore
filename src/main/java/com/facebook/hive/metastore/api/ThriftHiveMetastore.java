/*
 * Copyright (C) 2013 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
package com.facebook.hive.metastore.api;

import com.facebook.hive.metastore.client.HiveMetastore;

import org.apache.hadoop.hive.metastore.api.AlreadyExistsException;
import org.apache.hadoop.hive.metastore.api.ColumnStatistics;
import org.apache.hadoop.hive.metastore.api.ConfigValSecurityException;
import org.apache.hadoop.hive.metastore.api.Database;
import org.apache.hadoop.hive.metastore.api.EnvironmentContext;
import org.apache.hadoop.hive.metastore.api.FieldSchema;
import org.apache.hadoop.hive.metastore.api.HiveObjectPrivilege;
import org.apache.hadoop.hive.metastore.api.HiveObjectRef;
import org.apache.hadoop.hive.metastore.api.Index;
import org.apache.hadoop.hive.metastore.api.InvalidInputException;
import org.apache.hadoop.hive.metastore.api.InvalidObjectException;
import org.apache.hadoop.hive.metastore.api.InvalidOperationException;
import org.apache.hadoop.hive.metastore.api.InvalidPartitionException;
import org.apache.hadoop.hive.metastore.api.InvalidTableLinkDescriptionException;
import org.apache.hadoop.hive.metastore.api.MetaException;
import org.apache.hadoop.hive.metastore.api.NoSuchObjectException;
import org.apache.hadoop.hive.metastore.api.Partition;
import org.apache.hadoop.hive.metastore.api.PartitionEventType;
import org.apache.hadoop.hive.metastore.api.PrincipalPrivilegeSet;
import org.apache.hadoop.hive.metastore.api.PrincipalType;
import org.apache.hadoop.hive.metastore.api.PrivilegeBag;
import org.apache.hadoop.hive.metastore.api.Role;
import org.apache.hadoop.hive.metastore.api.Table;
import org.apache.hadoop.hive.metastore.api.Type;
import org.apache.hadoop.hive.metastore.api.UnknownDBException;
import org.apache.hadoop.hive.metastore.api.UnknownPartitionException;
import org.apache.hadoop.hive.metastore.api.UnknownTableException;
import org.apache.thrift.TException;

import java.io.Closeable;
import java.util.List;
import java.util.Map;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * Identical to the old ThriftMetaStore.Iface class generated by the IDL compiler.
 */
public interface ThriftHiveMetastore extends Closeable
{
    void create_database(Database database) throws AlreadyExistsException, InvalidObjectException, MetaException, TException;

    Database get_database(String name) throws NoSuchObjectException, MetaException, TException;

    void drop_database(String name, boolean deleteData, boolean cascade) throws NoSuchObjectException, InvalidOperationException, MetaException, TException;

    List<String> get_databases(String pattern) throws MetaException, TException;

    List<String> get_all_databases() throws MetaException, TException;

    void alter_database(String dbname, Database db) throws MetaException, NoSuchObjectException, TException;

    Type get_type(String name) throws MetaException, NoSuchObjectException, TException;

    boolean create_type(Type type) throws AlreadyExistsException, InvalidObjectException, MetaException, TException;

    boolean drop_type(String type) throws MetaException, NoSuchObjectException, TException;

    Map<String, Type> get_type_all(String name) throws MetaException, TException;

    List<FieldSchema> get_fields(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException;

    List<FieldSchema> get_schema(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException;

    void create_table(Table tbl) throws AlreadyExistsException, InvalidObjectException, MetaException, NoSuchObjectException, TException;

    void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context) throws AlreadyExistsException, InvalidObjectException, MetaException, NoSuchObjectException, TException;

    void create_table_link(String dbName, String targetDbName, String targetTableName, String owner, boolean isStatic, Map<String, String> linkProperties) throws AlreadyExistsException, InvalidObjectException, MetaException, NoSuchObjectException,
        InvalidTableLinkDescriptionException, TException;

    void drop_table(String dbname, String name, boolean deleteData) throws NoSuchObjectException, MetaException, TException;

    void drop_table_link(String dbName, String targetDbName, String targetTableName) throws NoSuchObjectException, MetaException, TException;

    void drop_table_with_environment_context(String dbname, String name, boolean deleteData, EnvironmentContext environment_context) throws NoSuchObjectException, MetaException, TException;

    List<String> get_tables(String db_name, String pattern) throws MetaException, TException;

    List<String> get_all_tables(String db_name) throws MetaException, TException;

    Table get_table(String dbname, String tbl_name) throws MetaException, NoSuchObjectException, TException;

    boolean exists_table(String dbname, String tbl_name) throws MetaException, TException;

    Table get_table_link(String dbName, String targetDbName, String targetTableName) throws MetaException, NoSuchObjectException, TException;

    List<Table> get_table_objects_by_name(String dbname, List<String> tbl_names) throws MetaException, InvalidOperationException, UnknownDBException, TException;

    List<String> get_table_names_by_filter(String dbname, String filter, short max_tables) throws MetaException, InvalidOperationException, UnknownDBException, TException;

    void alter_table(String dbname, String tbl_name, Table new_tbl) throws InvalidOperationException, MetaException, TException;

    void alter_table_with_environment_context(String dbname, String tbl_name, Table new_tbl, EnvironmentContext environment_context) throws InvalidOperationException, MetaException, TException;

    void alter_table_link(String dbName, String targetDbName, String targetTableName, Table new_tbl) throws InvalidOperationException, MetaException, TException;

    void alter_table_link_properties(String dbName, String targetDbName, String targetTableName, Map<String, String> updatedProperties) throws InvalidOperationException, MetaException, NoSuchObjectException, TException;

    Partition add_partition(Partition new_part) throws InvalidObjectException, AlreadyExistsException, MetaException, TException;

    Partition add_partition_with_environment_context(Partition new_part, EnvironmentContext environment_context) throws InvalidObjectException, AlreadyExistsException, MetaException, TException;

    Partition add_table_link_partition(String dbName, String targetDbName, String targetTableName, String partitionName) throws InvalidObjectException, AlreadyExistsException, NoSuchObjectException, MetaException, TException;

    int add_partitions(List<Partition> new_parts) throws InvalidObjectException, AlreadyExistsException, MetaException, TException;

    Partition append_partition(String db_name, String tbl_name, List<String> part_vals) throws InvalidObjectException, AlreadyExistsException, MetaException, TException;

    Partition append_partition_with_environment_context(String db_name, String tbl_name, List<String> part_vals, EnvironmentContext environment_context) throws InvalidObjectException, AlreadyExistsException, MetaException,
        TException;

    Partition append_partition_by_name(String db_name, String tbl_name, String part_name) throws InvalidObjectException, AlreadyExistsException, MetaException, TException;

    Partition append_partition_by_name_with_environment_context(String db_name, String tbl_name, String part_name, EnvironmentContext environment_context) throws InvalidObjectException, AlreadyExistsException, MetaException,
        TException;

    boolean drop_partition(String db_name, String tbl_name, List<String> part_vals, boolean deleteData) throws NoSuchObjectException, MetaException, TException;

    boolean drop_partition_with_environment_context(String db_name, String tbl_name, List<String> part_vals, boolean deleteData, EnvironmentContext environment_context) throws NoSuchObjectException, MetaException, TException;

    boolean drop_partition_by_name(String db_name, String tbl_name, String part_name, boolean deleteData) throws NoSuchObjectException, MetaException, TException;

    boolean drop_partition_by_name_with_environment_context(String db_name, String tbl_name, String part_name, boolean deleteData, EnvironmentContext environment_context) throws NoSuchObjectException, MetaException, TException;

    boolean drop_table_link_partition(String dbName, String targetDbName, String targetTableName, String partitionName) throws NoSuchObjectException, MetaException, TException;

    Partition get_partition_template(String db_name, String tbl_name, List<String> part_vals) throws InvalidObjectException, MetaException, TException;

    Partition get_partition(String db_name, String tbl_name, List<String> part_vals) throws MetaException, NoSuchObjectException, TException;

    List<Partition> exchange_partition(Map<String, String> partitionSpecs, String source_db, String source_table_name, String dest_db, String dest_table_name, boolean overwrite) throws MetaException, NoSuchObjectException, InvalidObjectException,
        InvalidInputException, AlreadyExistsException, TException;

    Partition get_partition_with_auth(String db_name, String tbl_name, List<String> part_vals, String user_name, List<String> group_names) throws MetaException, NoSuchObjectException, TException;

    Partition get_partition_by_name(String db_name, String tbl_name, String part_name) throws MetaException, NoSuchObjectException, TException;

    List<Partition> get_partitions(String db_name, String tbl_name, short max_parts) throws NoSuchObjectException, MetaException, TException;

    List<Partition> get_partitions_with_auth(String db_name, String tbl_name, short max_parts, String user_name, List<String> group_names) throws NoSuchObjectException, MetaException, TException;

    List<String> get_partition_names(String db_name, String tbl_name, short max_parts) throws MetaException, TException;

    int get_total_partitions(String db_name, String tbl_name) throws MetaException, TException;

    List<Partition> get_partitions_ps(String db_name, String tbl_name, List<String> part_vals, short max_parts) throws MetaException, NoSuchObjectException, TException;

    List<Partition> get_partitions_ps_with_auth(String db_name, String tbl_name, List<String> part_vals, short max_parts, String user_name, List<String> group_names) throws NoSuchObjectException, MetaException, TException;

    List<String> get_partition_names_ps(String db_name, String tbl_name, List<String> part_vals, short max_parts) throws MetaException, NoSuchObjectException, TException;

    List<Partition> get_partitions_by_filter(String db_name, String tbl_name, String filter, short max_parts) throws MetaException, NoSuchObjectException, TException;

    List<Partition> get_partitions_by_names(String db_name, String tbl_name, List<String> names) throws MetaException, NoSuchObjectException, TException;

    void alter_partition(String db_name, String tbl_name, Partition new_part) throws InvalidOperationException, MetaException, TException;

    void alter_partitions(String db_name, String tbl_name, List<Partition> new_parts) throws InvalidOperationException, MetaException, TException;

    void alter_partition_with_environment_context(String db_name, String tbl_name, Partition new_part, EnvironmentContext environment_context) throws InvalidOperationException, MetaException, TException;

    void rename_partition(String db_name, String tbl_name, List<String> part_vals, Partition new_part) throws InvalidOperationException, MetaException, TException;

    boolean partition_name_has_valid_characters(List<String> part_vals, boolean throw_exception) throws MetaException, TException;

    String get_config_value(String name, String defaultValue) throws ConfigValSecurityException, TException;

    List<String> partition_name_to_vals(String part_name) throws MetaException, TException;

    Map<String, String> partition_name_to_spec(String part_name) throws MetaException, TException;

    void markPartitionForEvent(String db_name, String tbl_name, Map<String, String> part_vals, PartitionEventType eventType) throws MetaException, NoSuchObjectException, UnknownDBException, UnknownTableException, UnknownPartitionException,
        InvalidPartitionException, TException;

    boolean isPartitionMarkedForEvent(String db_name, String tbl_name, Map<String, String> part_vals, PartitionEventType eventType) throws MetaException, NoSuchObjectException, UnknownDBException, UnknownTableException, UnknownPartitionException,
        InvalidPartitionException, TException;

    Index add_index(Index new_index, Table index_table) throws InvalidObjectException, AlreadyExistsException, MetaException, TException;

    void alter_index(String dbname, String base_tbl_name, String idx_name, Index new_idx) throws InvalidOperationException, MetaException, TException;

    boolean drop_index_by_name(String db_name, String tbl_name, String index_name, boolean deleteData) throws NoSuchObjectException, MetaException, TException;

    Index get_index_by_name(String db_name, String tbl_name, String index_name) throws MetaException, NoSuchObjectException, TException;

    List<Index> get_indexes(String db_name, String tbl_name, short max_indexes) throws NoSuchObjectException, MetaException, TException;

    List<String> get_index_names(String db_name, String tbl_name, short max_indexes) throws MetaException, TException;

    boolean update_table_column_statistics(ColumnStatistics stats_obj) throws NoSuchObjectException,
        InvalidObjectException, MetaException, InvalidInputException, TException;

    boolean update_partition_column_statistics(ColumnStatistics stats_obj) throws NoSuchObjectException,
        InvalidObjectException, MetaException, InvalidInputException, TException;

    ColumnStatistics get_table_column_statistics(String db_name, String tbl_name, String col_name) throws
        NoSuchObjectException, MetaException, InvalidInputException, InvalidObjectException, TException;

    ColumnStatistics get_partition_column_statistics(String db_name, String tbl_name, String part_name, String col_name)
        throws NoSuchObjectException, MetaException, InvalidInputException, InvalidObjectException, TException;

    boolean delete_partition_column_statistics(String db_name, String tbl_name, String part_name, String col_name) throws NoSuchObjectException, MetaException, InvalidObjectException, InvalidInputException, TException;

    boolean delete_table_column_statistics(String db_name, String tbl_name, String col_name) throws NoSuchObjectException, MetaException, InvalidObjectException, InvalidInputException, TException;

    boolean create_role(Role role) throws MetaException, TException;

    boolean drop_role(String role_name) throws MetaException, TException;

    List<String> get_role_names() throws MetaException, TException;

    boolean grant_role(String role_name, String principal_name, PrincipalType principal_type, String grantor, PrincipalType grantorType, boolean grant_option) throws MetaException, TException;

    boolean revoke_role(String role_name, String principal_name, PrincipalType principal_type) throws MetaException, TException;

    List<Role> list_roles(String principal_name, PrincipalType principal_type) throws MetaException, TException;

    PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, String user_name, List<String> group_names) throws MetaException, TException;

    List<HiveObjectPrivilege> list_privileges(String principal_name, PrincipalType principal_type, HiveObjectRef hiveObject) throws MetaException, TException;

    boolean grant_privileges(PrivilegeBag privileges) throws MetaException, TException;

    boolean revoke_privileges(PrivilegeBag privileges) throws MetaException, TException;

    List<String> set_ugi(String user_name, List<String> group_names) throws MetaException, TException;

    String get_delegation_token(String token_owner, String renewer_kerberos_principal_name) throws MetaException, TException;

    long renew_delegation_token(String token_str_form) throws MetaException, TException;

    void cancel_delegation_token(String token_str_form) throws MetaException, TException;

    public static class Client implements ThriftHiveMetastore
    {
        public static Client forHiveMetastore(final HiveMetastore hiveMetastore)
        {
            return new Client(hiveMetastore);
        }

        private final HiveMetastore delegate;

        public Client(final HiveMetastore delegate)
        {
            this.delegate = checkNotNull(delegate, "delegate is null");
        }

        @Override
        public void close()
        {
            delegate.close();
        }

        @Override
        public void create_database(Database database) throws AlreadyExistsException, InvalidObjectException, MetaException, TException
        {
            delegate.createDatabase(database);
        }

        @Override
        public Database get_database(String name) throws NoSuchObjectException, MetaException, TException
        {
            return delegate.getDatabase(name);
        }

        @Override
        public void drop_database(String name, boolean deleteData, boolean cascade) throws NoSuchObjectException, InvalidOperationException, MetaException, TException
        {
            delegate.dropDatabase(name, deleteData, cascade);
        }

        @Override
        public List<String> get_databases(String pattern) throws MetaException, TException
        {
            return delegate.getDatabases(pattern);
        }

        @Override
        public List<String> get_all_databases() throws MetaException, TException
        {
            return delegate.getAllDatabases();
        }

        @Override
        public void alter_database(String dbname, Database db) throws MetaException, NoSuchObjectException, TException
        {
            delegate.alterDatabase(dbname, db);
        }

        @Override
        public Type get_type(String name) throws MetaException, NoSuchObjectException, TException
        {
            return delegate.getType(name);
        }

        @Override
        public boolean create_type(Type type) throws AlreadyExistsException, InvalidObjectException, MetaException, TException
        {
            return delegate.createType(type);
        }

        @Override
        public boolean drop_type(String type) throws MetaException, NoSuchObjectException, TException
        {
            return delegate.dropType(type);
        }

        @Override
        public Map<String, Type> get_type_all(String name) throws MetaException, TException
        {
            return delegate.getTypeAll(name);
        }

        @Override
        public List<FieldSchema> get_fields(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException
        {
            return delegate.getFields(db_name, table_name);
        }

        @Override
        public List<FieldSchema> get_schema(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException
        {
            return delegate.getSchema(db_name, table_name);
        }

        @Override
        public void create_table(Table tbl) throws AlreadyExistsException, InvalidObjectException, MetaException, NoSuchObjectException, TException
        {
            delegate.createTable(tbl);
        }

        @Override
        public void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context) throws AlreadyExistsException, InvalidObjectException, MetaException, NoSuchObjectException, TException
        {
            delegate.createTableWithEnvironmentContext(tbl, environment_context);
        }

        @Override
        public void create_table_link(String dbName, String targetDbName, String targetTableName, String owner, boolean isStatic, Map<String, String> linkProperties) throws AlreadyExistsException, InvalidObjectException, MetaException,
            NoSuchObjectException, InvalidTableLinkDescriptionException, TException
        {
            delegate.createTableLink(dbName, targetDbName, targetTableName, owner, isStatic, linkProperties);
        }

        @Override
        public void drop_table(String dbname, String name, boolean deleteData) throws NoSuchObjectException, MetaException, TException
        {
            delegate.dropTable(dbname, name, deleteData);
        }

        @Override
        public void drop_table_link(String dbName, String targetDbName, String targetTableName) throws NoSuchObjectException, MetaException, TException
        {
            delegate.dropTableLink(dbName, targetDbName, targetTableName);
        }

        @Override
        public void drop_table_with_environment_context(String dbname, String name, boolean deleteData, EnvironmentContext environment_context) throws NoSuchObjectException, MetaException, TException
        {
            delegate.dropTableWithEnvironmentContext(dbname, name, deleteData, environment_context);
        }

        @Override
        public List<String> get_tables(String db_name, String pattern) throws MetaException, TException
        {
            return delegate.getTables(db_name, pattern);
        }

        @Override
        public List<String> get_all_tables(String db_name) throws MetaException, TException
        {
            return delegate.getAllTables(db_name);
        }

        @Override
        public Table get_table(String dbname, String tbl_name) throws MetaException, NoSuchObjectException, TException
        {
            return delegate.getTable(dbname, tbl_name);
        }

        @Override
        public boolean exists_table(String dbname, String tbl_name) throws MetaException, TException
        {
            return delegate.existsTable(dbname, tbl_name);
        }

        @Override
        public Table get_table_link(String dbName, String targetDbName, String targetTableName) throws MetaException, NoSuchObjectException, TException
        {
            return delegate.getTableLink(dbName, targetDbName, targetTableName);
        }

        @Override
        public List<Table> get_table_objects_by_name(String dbname, List<String> tbl_names) throws MetaException, InvalidOperationException, UnknownDBException, TException
        {
            return delegate.getTableObjectsByName(dbname, tbl_names);
        }

        @Override
        public List<String> get_table_names_by_filter(String dbname, String filter, short max_tables) throws MetaException, InvalidOperationException, UnknownDBException, TException
        {
            return delegate.getTableNamesByFilter(dbname, filter, max_tables);
        }

        @Override
        public void alter_table(String dbname, String tbl_name, Table new_tbl) throws InvalidOperationException, MetaException, TException
        {
            delegate.alterTable(dbname, tbl_name, new_tbl);
        }

        @Override
        public void alter_table_with_environment_context(String dbname, String tbl_name, Table new_tbl, EnvironmentContext environment_context) throws InvalidOperationException, MetaException, TException
        {
            delegate.alterTableWithEnvironmentContext(dbname, tbl_name, new_tbl, environment_context);
        }

        @Override
        public void alter_table_link(String dbName, String targetDbName, String targetTableName, Table new_tbl) throws InvalidOperationException, MetaException, TException
        {
            delegate.alterTableLink(dbName, targetDbName, targetTableName, new_tbl);
        }

        @Override
        public void alter_table_link_properties(String dbName, String targetDbName, String targetTableName, Map<String, String> updatedProperties) throws InvalidOperationException, MetaException, NoSuchObjectException, TException
        {
            delegate.alterTableLinkProperties(dbName, targetDbName, targetTableName, updatedProperties);
        }

        @Override
        public Partition add_partition(Partition new_part) throws InvalidObjectException, AlreadyExistsException, MetaException, TException
        {
            return delegate.addPartition(new_part);
        }

        @Override
        public Partition add_partition_with_environment_context(Partition new_part, EnvironmentContext environment_context) throws InvalidObjectException, AlreadyExistsException, MetaException, TException
        {
            return delegate.addPartitionWithEnvironmentContext(new_part, environment_context);
        }

        @Override
        public Partition add_table_link_partition(String dbName, String targetDbName, String targetTableName, String partitionName) throws InvalidObjectException, AlreadyExistsException, NoSuchObjectException, MetaException, TException
        {
            return delegate.addTableLinkPartition(dbName, targetDbName, targetTableName, partitionName);
        }

        @Override
        public int add_partitions(List<Partition> new_parts) throws InvalidObjectException, AlreadyExistsException, MetaException, TException
        {
            return delegate.addPartitions(new_parts);
        }

        @Override
        public Partition append_partition(String db_name, String tbl_name, List<String> part_vals) throws InvalidObjectException, AlreadyExistsException, MetaException, TException
        {
            return delegate.appendPartition(db_name, tbl_name, part_vals);
        }

        @Override
        public Partition append_partition_with_environment_context(String db_name, String tbl_name, List<String> part_vals, EnvironmentContext environment_context) throws InvalidObjectException, AlreadyExistsException, MetaException, TException
        {
            return delegate.appendPartitionWithEnvironmentContext(db_name, tbl_name, part_vals, environment_context);
        }

        @Override
        public Partition append_partition_by_name(String db_name, String tbl_name, String part_name) throws InvalidObjectException, AlreadyExistsException, MetaException, TException
        {
            return delegate.appendPartitionByName(db_name, tbl_name, part_name);
        }

        @Override
        public Partition append_partition_by_name_with_environment_context(String db_name, String tbl_name, String part_name, EnvironmentContext environment_context) throws InvalidObjectException, AlreadyExistsException, MetaException, TException
        {
            return delegate.appendPartitionByNameWithEnvironmentContext(db_name, tbl_name, part_name, environment_context);
        }

        @Override
        public boolean drop_partition(String db_name, String tbl_name, List<String> part_vals, boolean deleteData) throws NoSuchObjectException, MetaException, TException
        {
            return delegate.dropPartition(db_name, tbl_name, part_vals, deleteData);
        }

        @Override
        public boolean drop_partition_with_environment_context(String db_name, String tbl_name, List<String> part_vals, boolean deleteData, EnvironmentContext environment_context) throws NoSuchObjectException, MetaException, TException
        {
            return delegate.dropPartitionWithEnvironmentContext(db_name, tbl_name, part_vals, deleteData, environment_context);
        }

        @Override
        public boolean drop_partition_by_name(String db_name, String tbl_name, String part_name, boolean deleteData) throws NoSuchObjectException, MetaException, TException
        {
            return delegate.dropPartitionByName(db_name, tbl_name, part_name, deleteData);
        }

        @Override
        public boolean drop_partition_by_name_with_environment_context(String db_name, String tbl_name, String part_name, boolean deleteData, EnvironmentContext environment_context) throws NoSuchObjectException, MetaException, TException
        {
            return delegate.dropPartitionByNameWithEnvironmentContext(db_name, tbl_name, part_name, deleteData, environment_context);
        }

        @Override
        public boolean drop_table_link_partition(String dbName, String targetDbName, String targetTableName, String partitionName) throws NoSuchObjectException, MetaException, TException
        {
            return delegate.dropTableLinkPartition(dbName, targetDbName, targetTableName, partitionName);
        }

        @Override
        public Partition get_partition_template(String db_name, String tbl_name, List<String> part_vals) throws InvalidObjectException, MetaException, TException
        {
            return delegate.getPartitionTemplate(db_name, tbl_name, part_vals);
        }

        @Override
        public Partition get_partition(String db_name, String tbl_name, List<String> part_vals) throws MetaException, NoSuchObjectException, TException
        {
            return delegate.getPartition(db_name, tbl_name, part_vals);
        }

        @Override
        public List<Partition> exchange_partition(Map<String, String> partitionSpecs, String source_db, String source_table_name, String dest_db, String dest_table_name, boolean overwrite) throws MetaException, NoSuchObjectException,
            InvalidObjectException, InvalidInputException, AlreadyExistsException, TException
        {
            return delegate.exchangePartition(partitionSpecs, source_db, source_table_name, dest_db, dest_table_name, overwrite);
        }

        @Override
        public Partition get_partition_with_auth(String db_name, String tbl_name, List<String> part_vals, String user_name, List<String> group_names) throws MetaException, NoSuchObjectException, TException
        {
            return delegate.getPartitionWithAuth(db_name, tbl_name, part_vals, user_name, group_names);
        }

        @Override
        public Partition get_partition_by_name(String db_name, String tbl_name, String part_name) throws MetaException, NoSuchObjectException, TException
        {
            return delegate.getPartitionByName(db_name, tbl_name, part_name);
        }

        @Override
        public List<Partition> get_partitions(String db_name, String tbl_name, short max_parts) throws NoSuchObjectException, MetaException, TException
        {
            return delegate.getPartitions(db_name, tbl_name, max_parts);
        }

        @Override
        public List<Partition> get_partitions_with_auth(String db_name, String tbl_name, short max_parts, String user_name, List<String> group_names) throws NoSuchObjectException, MetaException, TException
        {
            return delegate.getPartitionsWithAuth(db_name, tbl_name, max_parts, user_name, group_names);
        }

        @Override
        public List<String> get_partition_names(String db_name, String tbl_name, short max_parts) throws MetaException, TException
        {
            return delegate.getPartitionNames(db_name, tbl_name, max_parts);
        }

        @Override
        public int get_total_partitions(String db_name, String tbl_name) throws MetaException, TException
        {
            return delegate.getTotalPartitions(db_name, tbl_name);
        }

        @Override
        public List<Partition> get_partitions_ps(String db_name, String tbl_name, List<String> part_vals, short max_parts) throws MetaException, NoSuchObjectException, TException
        {
            return delegate.getPartitionsPs(db_name, tbl_name, part_vals, max_parts);
        }

        @Override
        public List<Partition> get_partitions_ps_with_auth(String db_name, String tbl_name, List<String> part_vals, short max_parts, String user_name, List<String> group_names) throws NoSuchObjectException, MetaException, TException
        {
            return delegate.getPartitionsPsWithAuth(db_name, tbl_name, part_vals, max_parts, user_name, group_names);
        }

        @Override
        public List<String> get_partition_names_ps(String db_name, String tbl_name, List<String> part_vals, short max_parts) throws MetaException, NoSuchObjectException, TException
        {
            return delegate.getPartitionNamesPs(db_name, tbl_name, part_vals, max_parts);
        }

        @Override
        public List<Partition> get_partitions_by_filter(String db_name, String tbl_name, String filter, short max_parts) throws MetaException, NoSuchObjectException, TException
        {
            return delegate.getPartitionsByFilter(db_name, tbl_name, filter, max_parts);
        }

        @Override
        public List<Partition> get_partitions_by_names(String db_name, String tbl_name, List<String> names) throws MetaException, NoSuchObjectException, TException
        {
            return delegate.getPartitionsByNames(db_name, tbl_name, names);
        }

        @Override
        public void alter_partition(String db_name, String tbl_name, Partition new_part) throws InvalidOperationException, MetaException, TException
        {
            delegate.alterPartition(db_name, tbl_name, new_part);
        }

        @Override
        public void alter_partitions(String db_name, String tbl_name, List<Partition> new_parts) throws InvalidOperationException, MetaException, TException
        {
            delegate.alterPartitions(db_name, tbl_name, new_parts);
        }

        @Override
        public void alter_partition_with_environment_context(String db_name, String tbl_name, Partition new_part, EnvironmentContext environment_context) throws InvalidOperationException, MetaException, TException
        {
            delegate.alterPartitionWithEnvironmentContext(db_name, tbl_name, new_part, environment_context);
        }

        @Override
        public void rename_partition(String db_name, String tbl_name, List<String> part_vals, Partition new_part) throws InvalidOperationException, MetaException, TException
        {
            delegate.renamePartition(db_name, tbl_name, part_vals, new_part);
        }

        @Override
        public boolean partition_name_has_valid_characters(List<String> part_vals, boolean throw_exception) throws MetaException, TException
        {
            return delegate.partitionNameHasValidCharacters(part_vals, throw_exception);
        }

        @Override
        public String get_config_value(String name, String defaultValue) throws ConfigValSecurityException, TException
        {
            return delegate.getConfigValue(name, defaultValue);
        }

        @Override
        public List<String> partition_name_to_vals(String part_name) throws MetaException, TException
        {
            return delegate.partitionNameToVals(part_name);
        }

        @Override
        public Map<String, String> partition_name_to_spec(String part_name) throws MetaException, TException
        {
            return delegate.partitionNameToSpec(part_name);
        }

        @Override
        public void markPartitionForEvent(String db_name, String tbl_name, Map<String, String> part_vals, PartitionEventType eventType) throws MetaException, NoSuchObjectException, UnknownDBException, UnknownTableException, UnknownPartitionException,
            InvalidPartitionException, TException
        {
            delegate.markPartitionForEvent(db_name, tbl_name, part_vals, eventType);
        }

        @Override
        public boolean isPartitionMarkedForEvent(String db_name, String tbl_name, Map<String, String> part_vals, PartitionEventType eventType) throws MetaException, NoSuchObjectException, UnknownDBException, UnknownTableException,
            UnknownPartitionException, InvalidPartitionException, TException
        {
            return delegate.isPartitionMarkedForEvent(db_name, tbl_name, part_vals, eventType);
        }

        @Override
        public Index add_index(Index new_index, Table index_table) throws InvalidObjectException, AlreadyExistsException, MetaException, TException
        {
            return delegate.addIndex(new_index, index_table);
        }

        @Override
        public void alter_index(String dbname, String base_tbl_name, String idx_name, Index new_idx) throws InvalidOperationException, MetaException, TException
        {
            delegate.alterIndex(dbname, base_tbl_name, idx_name, new_idx);
        }

        @Override
        public boolean drop_index_by_name(String db_name, String tbl_name, String index_name, boolean deleteData) throws NoSuchObjectException, MetaException, TException
        {
            return delegate.dropIndexByName(db_name, tbl_name, index_name, deleteData);
        }

        @Override
        public Index get_index_by_name(String db_name, String tbl_name, String index_name) throws MetaException, NoSuchObjectException, TException
        {
            return delegate.getIndexByName(db_name, tbl_name, index_name);
        }

        @Override
        public List<Index> get_indexes(String db_name, String tbl_name, short max_indexes) throws NoSuchObjectException, MetaException, TException
        {
            return delegate.getIndexes(db_name, tbl_name, max_indexes);
        }

        @Override
        public List<String> get_index_names(String db_name, String tbl_name, short max_indexes) throws MetaException, TException
        {
            return delegate.getIndexNames(db_name, tbl_name, max_indexes);
        }

        @Override
        public boolean update_table_column_statistics(ColumnStatistics stats_obj) throws NoSuchObjectException, InvalidObjectException, MetaException, InvalidInputException, TException
        {
            return delegate.updateTableColumnStatistics(stats_obj);
        }

        @Override
        public boolean update_partition_column_statistics(ColumnStatistics stats_obj) throws NoSuchObjectException, InvalidObjectException, MetaException, InvalidInputException, TException
        {
            return delegate.updatePartitionColumnStatistics(stats_obj);
        }

        @Override
        public ColumnStatistics get_table_column_statistics(String db_name, String tbl_name, String col_name) throws NoSuchObjectException, MetaException, InvalidInputException, InvalidObjectException, TException
        {
            return delegate.getTableColumnStatistics(db_name, tbl_name, col_name);
        }

        @Override
        public ColumnStatistics get_partition_column_statistics(String db_name, String tbl_name, String part_name, String col_name) throws NoSuchObjectException, MetaException, InvalidInputException, InvalidObjectException, TException
        {
            return delegate.getPartitionColumnStatistics(db_name, tbl_name, part_name, col_name);
        }

        @Override
        public boolean delete_partition_column_statistics(String db_name, String tbl_name, String part_name, String col_name) throws NoSuchObjectException, MetaException, InvalidObjectException, InvalidInputException, TException
        {
            return delegate.deletePartitionColumnStatistics(db_name, tbl_name, part_name, col_name);
        }

        @Override
        public boolean delete_table_column_statistics(String db_name, String tbl_name, String col_name) throws NoSuchObjectException, MetaException, InvalidObjectException, InvalidInputException, TException
        {
            return delegate.deleteTableColumnStatistics(db_name, tbl_name, col_name);
        }

        @Override
        public boolean create_role(Role role) throws MetaException, TException
        {
            return delegate.createRole(role);
        }

        @Override
        public boolean drop_role(String role_name) throws MetaException, TException
        {
            return delegate.dropRole(role_name);
        }

        @Override
        public List<String> get_role_names() throws MetaException, TException
        {
            return delegate.getRoleNames();
        }

        @Override
        public boolean grant_role(String role_name, String principal_name, PrincipalType principal_type, String grantor, PrincipalType grantorType, boolean grant_option) throws MetaException, TException
        {
            return delegate.grantRole(role_name, principal_name, principal_type, grantor, grantorType, grant_option);
        }

        @Override
        public boolean revoke_role(String role_name, String principal_name, PrincipalType principal_type) throws MetaException, TException
        {
            return delegate.revokeRole(role_name, principal_name, principal_type);
        }

        @Override
        public List<Role> list_roles(String principal_name, PrincipalType principal_type) throws MetaException, TException
        {
            return delegate.listRoles(principal_name, principal_type);
        }

        @Override
        public PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, String user_name, List<String> group_names) throws MetaException, TException
        {
            return delegate.getPrivilegeSet(hiveObject, user_name, group_names);
        }

        @Override
        public List<HiveObjectPrivilege> list_privileges(String principal_name, PrincipalType principal_type, HiveObjectRef hiveObject) throws MetaException, TException
        {
            return delegate.listPrivileges(principal_name, principal_type, hiveObject);
        }

        @Override
        public boolean grant_privileges(PrivilegeBag privileges) throws MetaException, TException
        {
            return delegate.grantPrivileges(privileges);
        }

        @Override
        public boolean revoke_privileges(PrivilegeBag privileges) throws MetaException, TException
        {
            return delegate.revokePrivileges(privileges);
        }

        @Override
        public List<String> set_ugi(String user_name, List<String> group_names) throws MetaException, TException
        {
            return delegate.setUgi(user_name, group_names);
        }

        @Override
        public String get_delegation_token(String token_owner, String renewer_kerberos_principal_name) throws MetaException, TException
        {
            return delegate.getDelegationToken(token_owner, renewer_kerberos_principal_name);
        }

        @Override
        public long renew_delegation_token(String token_str_form) throws MetaException, TException
        {
            return delegate.renewDelegationToken(token_str_form);
        }

        @Override
        public void cancel_delegation_token(String token_str_form) throws MetaException, TException
        {
            delegate.cancelDelegationToken(token_str_form);
        }
    }
}
